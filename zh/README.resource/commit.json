{"compress":true,"commitItems":[["5a4f6eeb-cce0-4963-90a8-c164f4b2021a",1507036041207,"# 概述\n\nUAPI(Universal Application Platform Infrastructure)框架旨在为开发者提供了一组用于搭建应用程序的基础库，利用该框架开发者可以更容易关注业务逻辑的实现而无需关心一些底层通用逻辑的实现细节。\n\n# 概念\nUAPI框架提供了服务依赖管理，例如：\n```Java\n/**\n * Hello world application demo\n */\n@Service(autoActive=true)\n@Tag(\"Hello\")\npublic class HelloWorld {\n\n    @Inject\n    protected ILogger _logger;\n\n    @OnActivate\n    public void activate() {\n        this._logger.info(\"Hello World\");\n    }\n}\n```\nHelloWorld服务依赖ILogger服务，UAPI框架在运行时可以为HelloWorld服务注入ILogger服务。\n\nUAPI框架还提供了易于注入的配置服务，例如：\nTODO\n\n利用UAPI框架提供的事件行为框架，使得应用程序能够容易地划分成多个逻辑处理块，每个逻辑块可以重复使用, 例如：\nTODO\n\n# 使用\n为了引入UAPI相关的包，你必须添加UAPI的仓库，在gradle中：\n```groovy\nrepositories {\n    maven { url \"http://dl.bintray.com/inactionware/maven-snapshot\" }\n    maven { url \"http://dl.bintray.com/inactionware/maven-release\" }\n}\n```\n\n通过maven或者gradle来增加对UAPI框架的依赖，使用gradle：\n```groovy\ndependencies {\n    compile \"uapi:uapi.service:${uapi_cornerstone_version}\"\n    compile \"uapi:uapi.config:${uapi_cornerstone_version}\"\n}\n```\nUAPI框架由多个java包组成，你可以指定你需要的包来导入。\n\n# 编译UAPI\n使用git clone UAPI项目到本地，然后使用下面命令来编译：\n```shell\n./gradlew clean build\n```\n该命令会自动下载gradle，然后使用gradle来编译UAPI项目。\n\n> 注意，编译需要JDK1.8+，因此你需要下载安装JDK1.8+，在项目的根目录有个名为settings.env（windows使用settings.env.bat），在该文件中设置JAVA_HOME环境变量，然后运行该文件。\n",[[1507035983866,["xiaoming@min-home.local",[[1,126,"\n"]],[124,124],[125,125]]],[1507035988887,["xiaoming@min-home.local",[[1,125,"所谓"]],[125,125],[127,127]]],[1507035990372,["xiaoming@min-home.local",[[-1,125,"所谓"]],[127,127],[125,125]]],[1507035990596,["xiaoming@min-home.local",[[-1,126,"\n"]],[125,125],[124,124]]],[1507035991221,["xiaoming@min-home.local",[[1,126,"\n"]],[124,124],[125,125]]],[1507035991421,["xiaoming@min-home.local",[[1,127,"\n"]],[125,125],[126,126]]],[1507035994982,["xiaoming@min-home.local",[[1,126,"所谓框架"]],[126,126],[130,130]]],[1507035999748,["xiaoming@min-home.local",[[-1,126,"所谓框架"]],[130,130],[126,126]]],[1507036000455,["xiaoming@min-home.local",[[1,126,"和"]],[126,126],[127,127]]],[1507036001180,["xiaoming@min-home.local",[[-1,126,"和"]],[127,127],[126,126]]],[1507036014550,["xiaoming@min-home.local",[[1,126,"何谓框架？框架"]],[126,126],[133,133]]],[1507036020540,["xiaoming@min-home.local",[[-1,131,"框架"]],[133,133],[131,131]]],[1507036027982,["xiaoming@min-home.local",[[1,131,"与库"]],[131,131],[133,133]]],[1507036028740,["xiaoming@min-home.local",[[-1,132,"库"]],[133,133],[132,132]]],[1507036034967,["xiaoming@min-home.local",[[1,132,"程序库有何区别？"]],[132,132],[140,140]]],[1507036035653,["xiaoming@min-home.local",[[1,142,"\n"]],[140,140],[141,141]]],[1507036040407,["xiaoming@min-home.local",[[1,141,"框架"]],[141,141],[143,143]]],[1507036072743,["xiaoming@min-home.local",[[1,143,"指的是对应用程序的抽象，"]],[143,143],[155,155]]],[1507036086824,["xiaoming@min-home.local",[[1,151,"通用罗技"]],[151,151],[155,155]]],[1507036087652,["xiaoming@min-home.local",[[-1,153,"罗技"]],[155,155],[153,153]]],[1507036090031,["xiaoming@min-home.local",[[1,153,"逻辑的"]],[153,153],[156,156]]],[1507036090476,["xiaoming@min-home.local",[[-1,156,"的"]],[156,156],[155,155]]],[1507036095452,["xiaoming@min-home.local",[[1,159,"2⃣️"]],[159,159],[162,162]]],[1507036098109,["xiaoming@min-home.local",[[-1,159,"2⃣️"]],[162,162],[159,159]]],[1507036151422,["xiaoming@min-home.local",[[1,159,"而程序库是一些通用逻辑的组合，两者有本质的区别。"]],[159,159],[183,183]]],[1507036199710,["xiaoming@min-home.local",[[1,151,"中某一个"]],[151,151],[155,155]]],[1507036202494,["xiaoming@min-home.local",[[-1,157,"逻辑"],[1,159,"l"]],[157,159],[157,158]]],[1507036202653,["xiaoming@min-home.local",[[1,158,"i"]],[157,158],[157,159]]],[1507036202772,["xiaoming@min-home.local",[[1,159,"n"]],[157,159],[157,160]]],[1507036202892,["xiaoming@min-home.local",[[1,160,"g"]],[157,160],[157,161]]],[1507036203087,["xiaoming@min-home.local",[[1,161," y"]],[157,161],[157,163]]],[1507036203296,["xiaoming@min-home.local",[[1,163,"u"]],[157,163],[157,164]]],[1507036203766,["xiaoming@min-home.local",[[-1,157,"ling yu"],[1,164,"领域"]],[157,164],[159,159]]],[1507036208686,["xiaoming@min-home.local",[[1,160,"业务"]],[160,160],[162,162]]],[1507036218685,["xiaoming@min-home.local",[[1,191,"\n"]],[189,189],[190,190]]],[1507036218861,["xiaoming@min-home.local",[[1,192,"\n"]],[190,190],[191,191]]],[1507036220795,["xiaoming@min-home.local",[[1,191,"大多数"]],[191,191],[194,194]]],[1507036223767,["xiaoming@min-home.local",[[1,194,"框架"]],[194,194],[196,196]]],[1507036227989,["xiaoming@min-home.local",[[-1,191,"大多数框架"]],[196,196],[191,191]]],[1507036228358,["xiaoming@min-home.local",[[-1,192,"\n"]],[191,191],[190,190]]],[1507036228717,["xiaoming@min-home.local",[[-1,191,"\n"]],[190,190],[189,189]]],[1507036252711,["xiaoming@min-home.local",[[1,189,"大多数框架都是由程序库进化而来的。"]],[189,189],[206,206]]],[1507036254091,["xiaoming@min-home.local",[[1,208,"\n"]],[206,206],[207,207]]],[1507036254227,["xiaoming@min-home.local",[[1,209,"\n"]],[207,207],[208,208]]],[1507036314147,["xiaoming@min-home.local",[[-1,81,"库"]],[82,82],[81,81]]],[1507036316311,["xiaoming@min-home.local",[[1,81,"框架"]],[81,81],[83,83]]],[1507036335672,["xiaoming@min-home.local",[[1,209,"以面向对象"]],[209,209],[214,214]]],[1507036354629,["xiaoming@min-home.local",[[1,214,"设计来说，当需要开发一个程序的时候"]],[214,214],[231,231]]],[1507036356165,["xiaoming@min-home.local",[[-1,226,"程序的时候"]],[231,231],[226,226]]],[1507036357535,["xiaoming@min-home.local",[[1,226,"饮用"]],[226,226],[228,228]]],[1507036358196,["xiaoming@min-home.local",[[-1,226,"饮用"]],[228,228],[226,226]]],[1507036387663,["xiaoming@min-home.local",[[1,226,"应用的时候，我们会对我们的业务进行领域建模，提取除"]],[226,226],[251,251]]],[1507036388933,["xiaoming@min-home.local",[[-1,250,"除"]],[251,251],[250,250]]],[1507036397231,["xiaoming@min-home.local",[[1,250,"出领域对象，然后设计"]],[250,250],[260,260]]],[1507036430431,["xiaoming@min-home.local",[[1,260,"出领域对象的消息传送"]],[260,260],[270,270]]],[1507036432652,["xiaoming@min-home.local",[[-1,268,"传送"]],[270,270],[268,268]]],[1507036438367,["xiaoming@min-home.local",[[1,268,"发送规则"]],[268,268],[272,272]]],[1507036453492,["xiaoming@min-home.local",[[-1,268,"发送规则"]],[272,272],[268,268]]],[1507036463786,["xiaoming@min-home.local",[[-1,266,"消息"]],[268,268],[266,266]]],[1507036468240,["xiaoming@min-home.local",[[1,266,"状态是如何"]],[266,266],[271,271]]],[1507036477940,["xiaoming@min-home.local",[[-1,265,"的状态是如何"]],[271,271],[265,265]]],[1507036486333,["xiaoming@min-home.local",[[1,265,"可接受的消息以及"]],[265,265],[273,273]]],[1507036491372,["xiaoming@min-home.local",[[-1,271,"以及"]],[273,273],[271,271]]],[1507036519447,["xiaoming@min-home.local",[[1,271,"及其状态是如何受消息影响的，当然我们"]],[271,271],[289,289]]],[1507036555143,["xiaoming@min-home.local",[[1,289,"还会规划出各个领域对象是如何通过发送消息来进行交互的，这些模型"]],[289,289],[320,320]]],[1507036560973,["xiaoming@min-home.local",[[-1,314,"的，这些模型"]],[320,320],[314,314]]],[1507036580743,["xiaoming@min-home.local",[[1,314,"的模型，这个模型最终实现了我们应用的"]],[314,314],[332,332]]],[1507036583511,["xiaoming@min-home.local",[[1,332,"各种需求。"]],[332,332],[337,337]]],[1507036591628,["xiaoming@min-home.local",[[1,339,"\n"]],[337,337],[338,338]]],[1507036591836,["xiaoming@min-home.local",[[1,340,"\n"]],[338,338],[339,339]]],[1507036593047,["xiaoming@min-home.local",[[1,339,"当"]],[339,339],[340,340]]],[1507036604468,["xiaoming@min-home.local",[[-1,339,"当"]],[340,340],[339,339]]],[1507036605735,["xiaoming@min-home.local",[[1,339,"当"]],[339,339],[340,340]]],[1507036617428,["xiaoming@min-home.local",[[-1,339,"当"]],[340,340],[339,339]]],[1507036632503,["xiaoming@min-home.local",[[1,339,"在众多领域对象中我们会发现由"]],[339,339],[353,353]]],[1507036633157,["xiaoming@min-home.local",[[-1,352,"由"]],[353,353],[352,352]]],[1507036639326,["xiaoming@min-home.local",[[1,352,"有一些领域对象"]],[352,352],[359,359]]],[1507036642527,["xiaoming@min-home.local",[[1,359,"会"]],[359,359],[360,360]]],[1507036647588,["xiaoming@min-home.local",[[-1,359,"会"]],[360,360],[359,359]]],[1507036649175,["xiaoming@min-home.local",[[1,359,"保护"]],[359,359],[361,361]]],[1507036649805,["xiaoming@min-home.local",[[-1,359,"保护"]],[361,361],[359,359]]],[1507036655056,["xiaoming@min-home.local",[[1,359,"包含了一些飞虫"]],[359,359],[366,366]]],[1507036655660,["xiaoming@min-home.local",[[-1,364,"飞虫"]],[366,366],[364,364]]],[1507036699382,["xiaoming@min-home.local",[[1,364,"非常通用的逻辑，它们被大多数其他的领域对象所依赖，这些领域对象就"]],[364,364],[396,396]]],[1507036703743,["xiaoming@min-home.local",[[1,396,"编程"]],[396,396],[398,398]]],[1507036704469,["xiaoming@min-home.local",[[-1,396,"编程"]],[398,398],[396,396]]],[1507036716231,["xiaoming@min-home.local",[[1,396,"变成了程序库，利于"]],[396,396],[405,405]]],[1507036716868,["xiaoming@min-home.local",[[-1,403,"利于"]],[405,405],[403,403]]],[1507036742151,["xiaoming@min-home.local",[[1,403,"例如java"]],[403,403],[409,409]]],[1507036743845,["xiaoming@min-home.local",[[-1,405,"java"]],[409,409],[405,405]]],[1507036760751,["xiaoming@min-home.local",[[1,405,"Java里面的Collections就是典型的程序"]],[405,405],[430,430]]],[1507036773262,["xiaoming@min-home.local",[[1,430,"库，它提供了集合"]],[430,430],[438,438]]],[1507036775933,["xiaoming@min-home.local",[[-1,436,"集合"]],[438,438],[436,436]]],[1507036782374,["xiaoming@min-home.local",[[1,436,"集合的功能。"]],[436,436],[442,442]]],[1507036833330,["xiaoming@min-home.local",[[1,163,"liu"]],[163,163],[166,166]]],[1507036833955,["xiaoming@min-home.local",[[-1,163,"liu"]],[166,166],[163,163]]],[1507036836664,["xiaoming@min-home.local",[[1,163,"流程"]],[163,163],[165,165]]],[1507036846152,["xiaoming@min-home.local",[[1,172,"则"]],[172,172],[173,173]]],[1507036863367,["xiaoming@min-home.local",[[1,178,"的业务"]],[178,178],[181,181]]]]],["8fc9f177-f946-4dd9-8e7b-70f4411bff1f",1511662083618,"# 概述\n\nUAPI(Universal Application Platform Infrastructure)框架旨在为开发者提供了一组用于搭建应用程序的基础框架，利用该框架开发者可以更容易关注业务逻辑的实现而无需关心一些底层通用逻辑的实现细节。\n\n何谓框架？与程序库有何区别？\n框架指的是对应用程序中某一个通用领域的业务流程抽象，而程序库则是一些通用的业务逻辑的组合，两者有本质的区别。大多数框架都是由程序库进化而来的。\n\n以面向对象设计来说，当需要开发一个应用的时候，我们会对我们的业务进行领域建模，提取出领域对象，然后设计出领域对象可接受的消息及其状态是如何受消息影响的，当然我们还会规划出各个领域对象是如何通过发送消息来进行交互的模型，这个模型最终实现了我们应用的各种需求。\n\n在众多领域对象中我们会发现有一些领域对象包含了一些非常通用的逻辑，它们被大多数其他的领域对象所依赖，这些领域对象就变成了程序库，例如Java里面的Collections就是典型的程序库，它提供了集合的功能。\n\n# 概念\nUAPI框架提供了服务依赖管理，例如：\n```Java\n/**\n * Hello world application demo\n */\n@Service(autoActive=true)\n@Tag(\"Hello\")\npublic class HelloWorld {\n\n    @Inject\n    protected ILogger _logger;\n\n    @OnActivate\n    public void activate() {\n        this._logger.info(\"Hello World\");\n    }\n}\n```\nHelloWorld服务依赖ILogger服务，UAPI框架在运行时可以为HelloWorld服务注入ILogger服务。\n\nUAPI框架还提供了易于注入的配置服务，例如：\nTODO\n\n利用UAPI框架提供的事件行为框架，使得应用程序能够容易地划分成多个逻辑处理块，每个逻辑块可以重复使用, 例如：\nTODO\n\n# 使用\n为了引入UAPI相关的包，你必须添加UAPI的仓库，在gradle中：\n```groovy\nrepositories {\n    maven { url \"http://dl.bintray.com/inactionware/maven-snapshot\" }\n    maven { url \"http://dl.bintray.com/inactionware/maven-release\" }\n}\n```\n\n通过maven或者gradle来增加对UAPI框架的依赖，使用gradle：\n```groovy\ndependencies {\n    compile \"uapi:uapi.service:${uapi_cornerstone_version}\"\n    compile \"uapi:uapi.config:${uapi_cornerstone_version}\"\n}\n```\nUAPI框架由多个java包组成，你可以指定你需要的包来导入。\n\n# 编译UAPI\n使用git clone UAPI项目到本地，然后使用下面命令来编译：\n```shell\n./gradlew clean build\n```\n该命令会自动下载gradle，然后使用gradle来编译UAPI项目。\n\n> 注意，编译需要JDK1.8+，因此你需要下载安装JDK1.8+，在项目的根目录有个名为settings.env（windows使用settings.env.bat），在该文件中设置JAVA_HOME环境变量，然后运行该文件。\n",[[1511662027944,["xiaoming@min-home.local",[[-1,1545,"然后运行该文件"]],[1552,1552],[1545,1545]]],[1511662029512,["xiaoming@min-home.local",[[1,1545,"shi"]],[1545,1545],[1548,1548]]],[1511662030174,["xiaoming@min-home.local",[[-1,1545,"shi"]],[1548,1548],[1545,1545]]],[1511662035675,["xiaoming@min-home.local",[[1,1545," "]],[1545,1545],[1546,1546]]],[1511662036427,["xiaoming@min-home.local",[[-1,1545," "]],[1546,1546],[1545,1545]]],[1511662037263,["xiaoming@min-home.local",[[1,1545,"s"]],[1545,1545],[1546,1546]]],[1511662037593,["xiaoming@min-home.local",[[-1,1545,"s"]],[1546,1546],[1545,1545]]],[1511662038078,["xiaoming@min-home.local",[[1,1545," "]],[1545,1545],[1546,1546]]],[1511662039560,["xiaoming@min-home.local",[[-1,1544,"， "]],[1546,1546],[1544,1544]]],[1511662040533,["xiaoming@min-home.local",[[1,1544,","]],[1544,1544],[1545,1545]]],[1511662041023,["xiaoming@min-home.local",[[-1,1544,","]],[1545,1545],[1544,1544]]],[1511662056074,["xiaoming@min-home.local",[[1,1544,"，然后使用‘"]],[1544,1544],[1550,1550]]],[1511662057418,["xiaoming@min-home.local",[[-1,1549,"‘"]],[1550,1550],[1549,1549]]],[1511662062282,["xiaoming@min-home.local",[[1,1549,"···"]],[1549,1549],[1552,1552]]],[1511662063350,["xiaoming@min-home.local",[[-1,1549,"···"]],[1552,1552],[1549,1549]]],[1511662069318,["xiaoming@min-home.local",[[1,1549,"···"]],[1549,1549],[1552,1552]]],[1511662072797,["xiaoming@min-home.local",[[-1,1549,"···"]],[1552,1552],[1549,1549]]],[1511662083386,["xiaoming@min-home.local",[[1,1549,"`source ."]],[1549,1549],[1558,1558]]],[1511662091640,["xiaoming@min-home.local",[[1,1558,"/settings.env` "]],[1558,1558],[1573,1573]]],[1511662096007,["xiaoming@min-home.local",[[-1,1572," "]],[1573,1573],[1572,1572]]],[1511662102980,["xiaoming@min-home.local",[[1,1572,"来执行该文件（）"]],[1572,1572],[1580,1580]]],[1511662116139,["xiaoming@min-home.local",[[1,1579,"windows "]],[1579,1579],[1587,1587]]],[1511662116960,["xiaoming@min-home.local",[[-1,1586," "]],[1587,1587],[1586,1586]]],[1511662120085,["xiaoming@min-home.local",[[1,1586,"使用"]],[1586,1586],[1588,1588]]],[1511662123940,["xiaoming@min-home.local",[[-1,1586,"使用"]],[1588,1588],[1586,1586]]],[1511662127669,["xiaoming@min-home.local",[[1,1586,"直接使用"]],[1586,1586],[1590,1590]]],[1511662131848,["xiaoming@min-home.local",[[-1,1588,"使用"]],[1590,1590],[1588,1588]]],[1511662139405,["xiaoming@min-home.local",[[1,1588,"在命令行中执行"]],[1588,1588],[1595,1595]]],[1511662155217,["xiaoming@min-home.local",[[1,1595,"settings.env.bat即可"]],[1595,1595],[1613,1613]]],[1511662169170,["xiaoming@min-home.local",[[-1,1572,"来"]],[1573,1573],[1572,1572]]],[1511662173915,["xiaoming@min-home.local",[[1,1577,"z"]],[1577,1577],[1578,1578]]],[1511662174606,["xiaoming@min-home.local",[[-1,1577,"z"]],[1578,1578],[1577,1577]]],[1511662186185,["xiaoming@min-home.local",[[1,1577,"来设置环境变了"]],[1577,1577],[1584,1584]]],[1511662187029,["xiaoming@min-home.local",[[-1,1582,"变了"]],[1584,1584],[1582,1582]]],[1511662192109,["xiaoming@min-home.local",[[1,1582,"变量"]],[1582,1582],[1584,1584]]]]]]}